function init(self)
	-- 3D models.
	self.model_pred = render.predicate({'model'})
	-- Blue sky.
	self.clear_color = vmath.vector4(0.05, 0.4, 0.6, 1)
	
	-- Orthographic view matrix.
	self.view = vmath.matrix4()
	
	-- Perspective view camera position and orientation.
	self.camera_position = vmath.vector3(0, 100, 0)
	self.camera_look_at = vmath.vector3(0, 0, 0)
	
	-- Top-down view by defaut.
	self.is_perspective_view = false
end

function update(self, dt)
	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
	
	if self.is_perspective_view then
		-- Perspective.
		local up = vmath.vector3(0, 0, 1)
		local view = vmath.matrix4_look_at(self.camera_position, self.camera_look_at, up)
		render.set_view(view)
		local proj = vmath.matrix4_perspective(3.141592/2, 4/3, 1, 1000)
		render.set_projection(proj)
	else
		-- Orthographic.
		render.set_view(self.view)
		local height = render.get_window_height()
		local width = height * 4 / 3 -- 4x3 aspect ratio.
		render.set_projection(vmath.matrix4_orthographic(
			-width / 2, width / 2,
			-height / 2, height / 2,
			-1000, 1000))
	end
	
	render.enable_state(render.STATE_DEPTH_TEST)
	render.set_depth_mask(true)
	render.draw(self.model_pred)
end

function on_message(self, message_id, message, sender)
	-- Update perspective camera position.
	if message_id == hash('camera') then
		self.camera_position = message.camera_position
		self.camera_look_at = message.camera_look_at
	-- Switch perspective/orthographic view modes.
	elseif message_id == hash('camera_mode') then
		self.is_perspective_view = message.is_perspective_view
	end
end